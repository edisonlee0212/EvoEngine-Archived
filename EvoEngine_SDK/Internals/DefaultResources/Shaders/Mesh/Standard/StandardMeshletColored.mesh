#extension GL_EXT_mesh_shader : enable
#extension GL_ARB_shader_draw_parameters : enable
layout(local_size_x = 1) in;
layout(triangles) out;
layout(max_vertices = MESHLET_MAX_VERTICES_SIZE, max_primitives = MESHLET_MAX_TRIANGLES_SIZE) out;

layout(location = 0) out MS_V_OUT {
	vec3 FragPos;
	vec3 Normal;
	vec3 Tangent;
	vec2 TexCoord;
} ms_v_out[];

struct Task{
	uint instanceIndex;
	uint meshletOffset;
};

taskPayloadSharedEXT Task ts_in;

layout(location = 5) out flat uint currentInstanceIndex[];

void main()
{
	uint instanceIndex = ts_in.instanceIndex;
	uint meshletIndex = ts_in.meshletOffset + gl_GlobalInvocationID.x;

	mat4 model = EE_INSTANCES[instanceIndex].model;

	Meshlet meshlet = EE_MESHLETS[meshletIndex];

	uint verticesSize = meshlet.verticesSize;
	uint triangleSize = meshlet.triangleSize;
	uint chunkIndex = meshletIndex;
	SetMeshOutputsEXT(verticesSize, triangleSize);

	for (uint i = 0; i < verticesSize; ++i)
	{
		Vertex v = EE_VERTEX_DATA_CHUNKS[chunkIndex].vertices[i];
		vec3 N = normalize(vec3(model * vec4(v.normal.xyz, 0.0)));
		vec3 T = normalize(vec3(model * vec4(v.tangent.xyz, 0.0)));
		// re-orthogonalize T with respect to N
		T = normalize(T - dot(T, N) * N);
		ms_v_out[i].FragPos = vec3(model * vec4(v.position.xyz, 1.0));
		ms_v_out[i].Normal = N;
		ms_v_out[i].Tangent = T;
		ms_v_out[i].TexCoord = v.tex_coord.xy;
		currentInstanceIndex[i] = chunkIndex;
		gl_MeshVerticesEXT[i].gl_Position = EE_CAMERAS[EE_CAMERA_INDEX].projection_view * vec4(ms_v_out[i].FragPos, 1.0);
	}

	for (uint i = 0; i < triangleSize; ++i)
	{
		gl_PrimitiveTriangleIndicesEXT[i] = 
			uvec3(
				meshlet.indices[i * 3],
				meshlet.indices[i * 3 + 1],
				meshlet.indices[i * 3 + 2]);
	}
}