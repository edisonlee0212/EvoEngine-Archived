#extension GL_EXT_mesh_shader : enable
#extension GL_ARB_shader_draw_parameters : enable
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(triangles) out;
layout(max_vertices = MESHLET_MAX_VERTICES_SIZE, max_primitives = MESHLET_MAX_TRIANGLES_SIZE) out;

void main()
{
	uint localMeshletIndex = gl_WorkGroupID.x;
	uint instanceIndex = gl_DrawID + EE_INSTANCE_INDEX;
	uint meshletIndex = EE_INSTANCES[instanceIndex].meshletIndexOffset + localMeshletIndex;

	mat4 model = EE_INSTANCES[instanceIndex].model;

	uint verticesSize = EE_MESHLETS[meshletIndex].verticesSize;
	uint triangleSize = EE_MESHLETS[meshletIndex].triangleSize;
	SetMeshOutputsEXT(verticesSize, triangleSize);

	for (uint i = 0; i < verticesSize; ++i)
	{
		uint vertexIndex = EE_MESHLETS[meshletIndex].vertexIndices[i];
		gl_MeshVerticesEXT[i].gl_Position = 
			EE_DIRECTIONAL_LIGHTS[EE_CAMERA_INDEX].lightSpaceMatrix[EE_LIGHT_SPLIT_INDEX] * model * vec4(EE_GET_VERTEX(vertexIndex).position.xyz, 1.0);
	}

	for (uint i = 0; i < triangleSize; ++i)
	{
		gl_PrimitiveTriangleIndicesEXT[i] = 
			uvec3(
				EE_MESHLETS[meshletIndex].primitiveIndices[i * 3],
				EE_MESHLETS[meshletIndex].primitiveIndices[i * 3 + 1],
				EE_MESHLETS[meshletIndex].primitiveIndices[i * 3 + 2]);
	}
}