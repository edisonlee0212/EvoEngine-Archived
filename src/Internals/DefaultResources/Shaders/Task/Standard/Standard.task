#extension GL_EXT_mesh_shader : enable
#extension GL_ARB_shader_draw_parameters : enable

#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_vote : require

const uint WORKGROUP_SIZE = EXT_TASK_SUBGROUP_COUNT * EXT_TASK_SUBGROUP_SIZE;

const uint TASK_MESHLET_ITERATIONS = ((EXT_MESHLET_PER_TASK + WORKGROUP_SIZE - 1) / WORKGROUP_SIZE);

uint baseID = gl_WorkGroupID.x * EXT_MESHLET_PER_TASK;
uint laneID = gl_LocalInvocationID.x;

layout(local_size_x = WORKGROUP_SIZE) in;

struct Task{
	uint instanceIndex;
	uint	baseID;
	uint8_t	deltaIDs[EXT_MESHLET_PER_TASK];
};

#define BARRIER() \
	memoryBarrierShared(); \
	barrier();

taskPayloadSharedEXT Task ts_out;
#if EXT_TASK_SUBGROUP_COUNT > 1
	shared uint s_outMeshletsCount;
#endif

void main()
{
	uint instanceIndex = EE_INSTANCE_INDEX;
	uint meshLetIndexOffset = EE_INSTANCES[instanceIndex].meshlet_offset;
	uint meshlet_size = EE_INSTANCES[instanceIndex].meshlet_size;

#if EXT_TASK_SUBGROUP_COUNT > 1
	if (laneID == 0) {
		s_outMeshletsCount = 0;
	}
	BARRIER();
#endif
	
	baseID += meshLetIndexOffset;

	uint outMeshletsCount = 0;

	for (uint i = 0; i < TASK_MESHLET_ITERATIONS; i++)
	{
		uint meshletLocal  = laneID + i * WORKGROUP_SIZE;
		uint meshletGlobal = baseID + meshletLocal;

		bool render = !(meshletGlobal > meshLetIndexOffset + meshlet_size - 1);

		uvec4 voteMeshlets = subgroupBallot(render);
		uint numMeshlets  = subgroupBallotBitCount(voteMeshlets);

#if EXT_TASK_SUBGROUP_COUNT > 1
		if (gl_SubgroupInvocationID == 0) {
			outMeshletsCount = atomicAdd(s_outMeshletsCount, numMeshlets);
		}
		outMeshletsCount = subgroupBroadcastFirst(outMeshletsCount);
#endif
		uint idxOffset  = subgroupBallotExclusiveBitCount(voteMeshlets) + outMeshletsCount;
		if (render) 
		{
			ts_out.deltaIDs[idxOffset] = uint8_t(meshletLocal);
		}
#if EXT_TASK_SUBGROUP_COUNT == 1
		outMeshletsCount += numMeshlets;
#endif
	}

#if EXT_TASK_SUBGROUP_COUNT > 1
	BARRIER();
	outMeshletsCount = s_outMeshletsCount;
#endif

	if (laneID == 0) {
		ts_out.baseID = baseID;
		ts_out.instanceIndex = instanceIndex;
#if USE_STATS
		atomicAdd(stats.tasksOutput, outMeshletsCount);
#endif
	}
	EmitMeshTasksEXT(outMeshletsCount, 1, 1);
}